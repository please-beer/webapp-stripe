{
  "reportTitle": "webapp-stripe",
  "stats": {
    "suites": 7,
    "tests": 12,
    "passes": 11,
    "pending": 0,
    "failures": 1,
    "start": "2015-04-15T20:02:15.660Z",
    "end": "2015-04-15T20:02:15.691Z",
    "duration": 31,
    "testsRegistered": 12,
    "passPercent": 91.7,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "The addCard function",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The addCard function should return a promise",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        createSource: R.always(BPromise.resolve())\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> addCard.call(ctx).should.be.Promise;",
            "isRoot": false,
            "uuid": "2072da69-d12d-4b5b-9a9b-f94482574cd2",
            "parentUUID": "f493f10c-c823-4e84-be80-33cadda74bf8",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/lib/add-card.js",
        "uuid": "f493f10c-c823-4e84-be80-33cadda74bf8",
        "fullFile": "/Users/pscanf/mondora/please.beer/webapp-stripe/tests/unit/lib/add-card.js",
        "passes": [
          "[Circular ~.suites.suites.0.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "The promise returned by the addCard function",
        "suites": [],
        "tests": [
          {
            "title": "should be resolved if adding the card succeeds",
            "fullTitle": "The promise returned by the addCard function should be resolved if adding the card succeeds",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        createSource: R.always(BPromise.resolve({}))\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> addCard.call(ctx).should.be.fulfilledWith({});",
            "isRoot": false,
            "uuid": "78ec944b-3dc3-480b-a9e9-7ba2333a2076",
            "parentUUID": "d05ba137-add9-4927-bfcb-2c4b217ca55f",
            "skipped": false
          },
          {
            "title": "should be rejected if adding the card fails",
            "fullTitle": "The promise returned by the addCard function should be rejected if adding the card fails",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        createSource: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.reject();\n        }\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> addCard.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error while adding the card.\"</span>);",
            "isRoot": false,
            "uuid": "961273ae-5b20-4987-8f7f-1c4c27ee6c81",
            "parentUUID": "d05ba137-add9-4927-bfcb-2c4b217ca55f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/lib/add-card.js",
        "uuid": "d05ba137-add9-4927-bfcb-2c4b217ca55f",
        "fullFile": "/Users/pscanf/mondora/please.beer/webapp-stripe/tests/unit/lib/add-card.js",
        "passes": [
          "[Circular ~.suites.suites.1.tests.0]",
          "[Circular ~.suites.suites.1.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5
      },
      {
        "title": "The deleteCard function",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The deleteCard function should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        deleteCard: R.always(BPromise.resolve())\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> deleteCard.call(ctx).should.be.Promise;",
            "isRoot": false,
            "uuid": "3c92e53d-b6c8-4e6a-a305-0b77943ce745",
            "parentUUID": "17e65839-c6d5-4bd7-8190-c0e10019c3bb",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/lib/delete-card.js",
        "uuid": "17e65839-c6d5-4bd7-8190-c0e10019c3bb",
        "fullFile": "/Users/pscanf/mondora/please.beer/webapp-stripe/tests/unit/lib/delete-card.js",
        "passes": [
          "[Circular ~.suites.suites.2.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "The promise returned by the deleteCard function",
        "suites": [],
        "tests": [
          {
            "title": "should be resolved if deleting the card succeeds",
            "fullTitle": "The promise returned by the deleteCard function should be resolved if deleting the card succeeds",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        deleteCard: R.always(BPromise.resolve({}))\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> deleteCard.call(ctx).should.be.fulfilledWith({});",
            "isRoot": false,
            "uuid": "bb203400-67ab-4071-b54f-0ec5ede13d9f",
            "parentUUID": "9a1b0254-5614-47b8-98c6-fe7a101ac97f",
            "skipped": false
          },
          {
            "title": "should be rejected if deleting the card fails",
            "fullTitle": "The promise returned by the deleteCard function should be rejected if deleting the card fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        deleteCard: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.reject();\n        }\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> deleteCard.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error while deleting the card.\"</span>);",
            "isRoot": false,
            "uuid": "2b276c50-15c0-4742-b5ae-c29397e4939b",
            "parentUUID": "9a1b0254-5614-47b8-98c6-fe7a101ac97f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/lib/delete-card.js",
        "uuid": "9a1b0254-5614-47b8-98c6-fe7a101ac97f",
        "fullFile": "/Users/pscanf/mondora/please.beer/webapp-stripe/tests/unit/lib/delete-card.js",
        "passes": [
          "[Circular ~.suites.suites.3.tests.0]",
          "[Circular ~.suites.suites.3.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The ensureLogin function",
        "suites": [],
        "tests": [
          {
            "title": "should throw if userId in the context is null",
            "fullTitle": "The ensureLogin function should throw if userId in the context is null",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    userId: <span class=\"hljs-literal\">null</span>\n};\n<span class=\"hljs-keyword\">return</span> ensureLogin.bind(ctx).should.throw(<span class=\"hljs-string\">\"Login required.\"</span>);",
            "isRoot": false,
            "uuid": "e89d8ecb-a6b3-4f4d-a968-d2a7282ea89d",
            "parentUUID": "7c14d033-cfa7-4d4e-b54f-97f3a6c5630a",
            "skipped": false
          },
          {
            "title": "should not throw if userId in the context is defined",
            "fullTitle": "The ensureLogin function should not throw if userId in the context is defined",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    userId: <span class=\"hljs-string\">\"someId\"</span>\n};\n<span class=\"hljs-keyword\">return</span> ensureLogin.bind(ctx).should.not.throw();",
            "isRoot": false,
            "uuid": "2aa95bdc-431c-49bc-a8a6-9d4e190550e9",
            "parentUUID": "7c14d033-cfa7-4d4e-b54f-97f3a6c5630a",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/lib/ensure-login.js",
        "uuid": "7c14d033-cfa7-4d4e-b54f-97f3a6c5630a",
        "fullFile": "/Users/pscanf/mondora/please.beer/webapp-stripe/tests/unit/lib/ensure-login.js",
        "passes": [
          "[Circular ~.suites.suites.4.tests.0]",
          "[Circular ~.suites.suites.4.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The stripeCustomerSync function",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The stripeCustomerSync function should return a promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: R.always(BPromise.resolve())\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">false</span>, {});\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.Promise;",
            "isRoot": false,
            "uuid": "e67e5d67-ea95-4dff-8f64-851438038675",
            "parentUUID": "68850036-883a-4074-89cd-7b1bb549d190",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/lib/stripe-costumer-sync.js",
        "uuid": "68850036-883a-4074-89cd-7b1bb549d190",
        "fullFile": "/Users/pscanf/mondora/please.beer/webapp-stripe/tests/unit/lib/stripe-costumer-sync.js",
        "passes": [
          "[Circular ~.suites.suites.5.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The promise returned by the stripeCustomerSync function",
        "suites": [],
        "tests": [
          {
            "title": "should be resolved if syncing succeeds",
            "fullTitle": "The promise returned by the stripeCustomerSync function should be resolved if syncing succeeds",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: R.always(BPromise.resolve())\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">null</span>, {});\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.fulfilledWith({});",
            "err": {
              "name": "AssertionError",
              "message": "expected [Promise] to be fulfilled",
              "stack": "AssertionError: expected [Promise] to be fulfilled"
            },
            "isRoot": false,
            "uuid": "5e719bf7-fce1-46e2-8fb0-523be13f7827",
            "parentUUID": "b20a3929-d384-436c-9330-018038e75e64",
            "skipped": false
          },
          {
            "title": "should be rejected if syncing fails at stripe",
            "fullTitle": "The promise returned by the stripeCustomerSync function should be rejected if syncing fails at stripe",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.reject();\n        }\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">null</span>, {});\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error syncing with stripe. Try again.\"</span>);",
            "isRoot": false,
            "uuid": "be26e2d5-f7e7-47bd-a92a-f964abdd41ad",
            "parentUUID": "b20a3929-d384-436c-9330-018038e75e64",
            "skipped": false
          },
          {
            "title": "should be rejected if syncing fails at mongo",
            "fullTitle": "The promise returned by the stripeCustomerSync function should be rejected if syncing fails at mongo",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: R.always(BPromise.resolve())\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">true</span>);\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error syncing with stripe. Try again.\"</span>);",
            "isRoot": false,
            "uuid": "eb32b553-6e8f-40a5-97d0-27cd17e945fe",
            "parentUUID": "b20a3929-d384-436c-9330-018038e75e64",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/lib/stripe-costumer-sync.js",
        "uuid": "b20a3929-d384-436c-9330-018038e75e64",
        "fullFile": "/Users/pscanf/mondora/please.beer/webapp-stripe/tests/unit/lib/stripe-costumer-sync.js",
        "passes": [
          "[Circular ~.suites.suites.6.tests.1]",
          "[Circular ~.suites.suites.6.tests.2]"
        ],
        "failures": [
          "[Circular ~.suites.suites.6.tests.0]"
        ],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 2,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "a00904cf-b267-4250-b0ad-d0256e5d6335",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should return a promise",
      "fullTitle": "The addCard function should return a promise",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        createSource: R.always(BPromise.resolve())\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> addCard.call(ctx).should.be.Promise;",
      "isRoot": false,
      "uuid": "3d001658-82ec-4823-b421-ecbefe7d259b",
      "parentUUID": "f493f10c-c823-4e84-be80-33cadda74bf8",
      "skipped": false
    },
    {
      "title": "should be resolved if adding the card succeeds",
      "fullTitle": "The promise returned by the addCard function should be resolved if adding the card succeeds",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        createSource: R.always(BPromise.resolve({}))\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> addCard.call(ctx).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "0da06cfc-673c-4629-8810-e6f0db692172",
      "parentUUID": "d05ba137-add9-4927-bfcb-2c4b217ca55f",
      "skipped": false
    },
    {
      "title": "should be rejected if adding the card fails",
      "fullTitle": "The promise returned by the addCard function should be rejected if adding the card fails",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        createSource: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.reject();\n        }\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> addCard.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error while adding the card.\"</span>);",
      "isRoot": false,
      "uuid": "26a47452-4cef-4e45-8442-53cb6129b622",
      "parentUUID": "d05ba137-add9-4927-bfcb-2c4b217ca55f",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The deleteCard function should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        deleteCard: R.always(BPromise.resolve())\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> deleteCard.call(ctx).should.be.Promise;",
      "isRoot": false,
      "uuid": "73ae24e6-8254-44c5-ba2b-08fff6bea3fb",
      "parentUUID": "17e65839-c6d5-4bd7-8190-c0e10019c3bb",
      "skipped": false
    },
    {
      "title": "should be resolved if deleting the card succeeds",
      "fullTitle": "The promise returned by the deleteCard function should be resolved if deleting the card succeeds",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        deleteCard: R.always(BPromise.resolve({}))\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> deleteCard.call(ctx).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "90cb33f8-c8e9-44dd-9cd5-c0211cfb573d",
      "parentUUID": "9a1b0254-5614-47b8-98c6-fe7a101ac97f",
      "skipped": false
    },
    {
      "title": "should be rejected if deleting the card fails",
      "fullTitle": "The promise returned by the deleteCard function should be rejected if deleting the card fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        deleteCard: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.reject();\n        }\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> deleteCard.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error while deleting the card.\"</span>);",
      "isRoot": false,
      "uuid": "1f37ab2e-5e99-4ae0-a6e6-820f99509573",
      "parentUUID": "9a1b0254-5614-47b8-98c6-fe7a101ac97f",
      "skipped": false
    },
    {
      "title": "should throw if userId in the context is null",
      "fullTitle": "The ensureLogin function should throw if userId in the context is null",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    userId: <span class=\"hljs-literal\">null</span>\n};\n<span class=\"hljs-keyword\">return</span> ensureLogin.bind(ctx).should.throw(<span class=\"hljs-string\">\"Login required.\"</span>);",
      "isRoot": false,
      "uuid": "dda04a6c-1c78-48e3-ba5e-1a798b89c963",
      "parentUUID": "7c14d033-cfa7-4d4e-b54f-97f3a6c5630a",
      "skipped": false
    },
    {
      "title": "should not throw if userId in the context is defined",
      "fullTitle": "The ensureLogin function should not throw if userId in the context is defined",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    userId: <span class=\"hljs-string\">\"someId\"</span>\n};\n<span class=\"hljs-keyword\">return</span> ensureLogin.bind(ctx).should.not.throw();",
      "isRoot": false,
      "uuid": "2acfaff7-d0e5-4562-acb7-0ac5af626f81",
      "parentUUID": "7c14d033-cfa7-4d4e-b54f-97f3a6c5630a",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The stripeCustomerSync function should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: R.always(BPromise.resolve())\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">false</span>, {});\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.Promise;",
      "isRoot": false,
      "uuid": "1b51e72d-beab-4e06-ae7e-05b43f3609ba",
      "parentUUID": "68850036-883a-4074-89cd-7b1bb549d190",
      "skipped": false
    },
    {
      "title": "should be resolved if syncing succeeds",
      "fullTitle": "The promise returned by the stripeCustomerSync function should be resolved if syncing succeeds",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: R.always(BPromise.resolve())\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">null</span>, {});\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.fulfilledWith({});",
      "err": {
        "name": "AssertionError",
        "message": "expected [Promise] to be fulfilled",
        "stack": "AssertionError: expected [Promise] to be fulfilled"
      },
      "isRoot": false,
      "uuid": "4df76497-2edd-4698-9e23-faed53de47c7",
      "parentUUID": "b20a3929-d384-436c-9330-018038e75e64",
      "skipped": false
    },
    {
      "title": "should be rejected if syncing fails at stripe",
      "fullTitle": "The promise returned by the stripeCustomerSync function should be rejected if syncing fails at stripe",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.reject();\n        }\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">null</span>, {});\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error syncing with stripe. Try again.\"</span>);",
      "isRoot": false,
      "uuid": "fef3fa4b-9770-4f38-92a7-f979651a778e",
      "parentUUID": "b20a3929-d384-436c-9330-018038e75e64",
      "skipped": false
    },
    {
      "title": "should be rejected if syncing fails at mongo",
      "fullTitle": "The promise returned by the stripeCustomerSync function should be rejected if syncing fails at mongo",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: R.always(BPromise.resolve())\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">true</span>);\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error syncing with stripe. Try again.\"</span>);",
      "isRoot": false,
      "uuid": "f401b0e2-f81b-41ae-92f9-2b82e8a692e0",
      "parentUUID": "b20a3929-d384-436c-9330-018038e75e64",
      "skipped": false
    }
  ],
  "allHooks": [],
  "allPending": [],
  "allPasses": [
    {
      "title": "should return a promise",
      "fullTitle": "The addCard function should return a promise",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        createSource: R.always(BPromise.resolve())\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> addCard.call(ctx).should.be.Promise;",
      "isRoot": false,
      "uuid": "14828b8e-5bf8-427f-b356-137d84cb3e13",
      "parentUUID": "f493f10c-c823-4e84-be80-33cadda74bf8",
      "skipped": false
    },
    {
      "title": "should be resolved if adding the card succeeds",
      "fullTitle": "The promise returned by the addCard function should be resolved if adding the card succeeds",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        createSource: R.always(BPromise.resolve({}))\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> addCard.call(ctx).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "0cea0d5b-b931-41b2-a8f8-ba7b34b32237",
      "parentUUID": "d05ba137-add9-4927-bfcb-2c4b217ca55f",
      "skipped": false
    },
    {
      "title": "should be rejected if adding the card fails",
      "fullTitle": "The promise returned by the addCard function should be rejected if adding the card fails",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        createSource: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.reject();\n        }\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> addCard.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error while adding the card.\"</span>);",
      "isRoot": false,
      "uuid": "bc4ca61e-339e-4f9e-b4be-00dd919c9a21",
      "parentUUID": "d05ba137-add9-4927-bfcb-2c4b217ca55f",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The deleteCard function should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        deleteCard: R.always(BPromise.resolve())\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> deleteCard.call(ctx).should.be.Promise;",
      "isRoot": false,
      "uuid": "c432f9c8-b66a-4c7a-8941-122523135dfb",
      "parentUUID": "17e65839-c6d5-4bd7-8190-c0e10019c3bb",
      "skipped": false
    },
    {
      "title": "should be resolved if deleting the card succeeds",
      "fullTitle": "The promise returned by the deleteCard function should be resolved if deleting the card succeeds",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        deleteCard: R.always(BPromise.resolve({}))\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> deleteCard.call(ctx).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "2fae287a-12ec-47b2-a355-fd8c0655c6f3",
      "parentUUID": "9a1b0254-5614-47b8-98c6-fe7a101ac97f",
      "skipped": false
    },
    {
      "title": "should be rejected if deleting the card fails",
      "fullTitle": "The promise returned by the deleteCard function should be rejected if deleting the card fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        deleteCard: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.reject();\n        }\n    }},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> deleteCard.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error while deleting the card.\"</span>);",
      "isRoot": false,
      "uuid": "c56fdd09-c3d7-47ee-876e-b833958a8cca",
      "parentUUID": "9a1b0254-5614-47b8-98c6-fe7a101ac97f",
      "skipped": false
    },
    {
      "title": "should throw if userId in the context is null",
      "fullTitle": "The ensureLogin function should throw if userId in the context is null",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    userId: <span class=\"hljs-literal\">null</span>\n};\n<span class=\"hljs-keyword\">return</span> ensureLogin.bind(ctx).should.throw(<span class=\"hljs-string\">\"Login required.\"</span>);",
      "isRoot": false,
      "uuid": "2ee5625e-0a2e-4591-a203-7d012b9dd5f9",
      "parentUUID": "7c14d033-cfa7-4d4e-b54f-97f3a6c5630a",
      "skipped": false
    },
    {
      "title": "should not throw if userId in the context is defined",
      "fullTitle": "The ensureLogin function should not throw if userId in the context is defined",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    userId: <span class=\"hljs-string\">\"someId\"</span>\n};\n<span class=\"hljs-keyword\">return</span> ensureLogin.bind(ctx).should.not.throw();",
      "isRoot": false,
      "uuid": "8ba8ee97-aba9-4fa0-b626-5e11dc6baf56",
      "parentUUID": "7c14d033-cfa7-4d4e-b54f-97f3a6c5630a",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The stripeCustomerSync function should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: R.always(BPromise.resolve())\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">false</span>, {});\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.Promise;",
      "isRoot": false,
      "uuid": "ca12f91d-b291-470e-9bec-a132c28d43cb",
      "parentUUID": "68850036-883a-4074-89cd-7b1bb549d190",
      "skipped": false
    },
    {
      "title": "should be rejected if syncing fails at stripe",
      "fullTitle": "The promise returned by the stripeCustomerSync function should be rejected if syncing fails at stripe",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.reject();\n        }\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">null</span>, {});\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error syncing with stripe. Try again.\"</span>);",
      "isRoot": false,
      "uuid": "0acab7b6-11ce-4dc4-b186-da34175dbf87",
      "parentUUID": "b20a3929-d384-436c-9330-018038e75e64",
      "skipped": false
    },
    {
      "title": "should be rejected if syncing fails at mongo",
      "fullTitle": "The promise returned by the stripeCustomerSync function should be rejected if syncing fails at mongo",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: R.always(BPromise.resolve())\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">true</span>);\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.rejectedWith(<span class=\"hljs-string\">\"Error syncing with stripe. Try again.\"</span>);",
      "isRoot": false,
      "uuid": "8e6a9c9c-c1c8-4018-8423-56e42328a8a7",
      "parentUUID": "b20a3929-d384-436c-9330-018038e75e64",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "should be resolved if syncing succeeds",
      "fullTitle": "The promise returned by the stripeCustomerSync function should be resolved if syncing succeeds",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    stripe: {customers: {\n        retrieve: R.always(BPromise.resolve())\n    }},\n    db: {collection: R.always({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(first, second, cb)</span> </span>{\n            cb(<span class=\"hljs-literal\">null</span>, {});\n        }\n    })},\n    user: {stripeCustomer: {}}\n};\n<span class=\"hljs-keyword\">return</span> stripeCustomerSync.call(ctx).should.be.fulfilledWith({});",
      "err": {
        "name": "AssertionError",
        "message": "expected [Promise] to be fulfilled",
        "stack": "AssertionError: expected [Promise] to be fulfilled"
      },
      "isRoot": false,
      "uuid": "403a0139-e4fa-4ef2-9f48-b21c7eac3743",
      "parentUUID": "b20a3929-d384-436c-9330-018038e75e64",
      "skipped": false
    }
  ]
}